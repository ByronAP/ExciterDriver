# GitHub Actions: Main Pipeline (Check -> Release)
#
# This single pipeline manages both continuous integration checks and releases.
# It ensures a clean, predictable workflow for all changes.
#
# How it works:
#
# 1. On Pull Request to `dev`:
#    - Runs the `build_check` job to lint and compile the code. This validates the PR.
#
# 2. On Push to `dev`:
#    - Runs the `build_check` job to ensure the development head is always stable.
#
# 3. On Push to `main` (i.e., a PR is merged from dev):
#    - Runs the `build_check` job as a final gate.
#    - If it succeeds, it runs the `create_release` job which:
#      - Calculates the next patch version.
#      - Compiles the sketch with the final version string injected.
#      - Creates the new GitHub Tag and Release with the compiled .hex binary.

name: Main CI & Release Pipeline

on:
  push:
    branches:
      - main
      - dev
  pull_request:
    branches:
      - dev

# =========================================================================
# == PERMISSIONS
# =========================================================================
permissions:
  contents: write
  pull-requests: read

jobs:
  # =========================================================================
  # == JOB 1: Lint and compile the code on all triggers
  # =========================================================================
  build_check:
    name: Build & Lint Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run arduino-lint
        uses: arduino/arduino-lint-action@v1
        with:
          path: src/ExciterDriver

      - name: Set up Arduino CLI
        uses: arduino/setup-arduino-cli@v2

      - name: Install Arduino AVR Core
        run: arduino-cli core install arduino:avr
      
      - name: Compile the sketch for verification
        run: arduino-cli compile --fqbn arduino:avr:nano src/ExciterDriver/ExciterDriver.ino

  # =========================================================================
  # == JOB 2: Create a release, but ONLY if triggered from `main` branch
  # =========================================================================
  create_release:
    name: Create Release
    runs-on: ubuntu-latest
    
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: build_check

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Calculate Next Version
        id: calc_version
        run: |
          # Step 1: Extract MAJOR.MINOR version from the source code
          VERSION_PREFIX=$(grep "#define VERSION" src/ExciterDriver/ExciterDriver.ino | sed -E 's/#define VERSION "([0-9]+\.[0-9]+)\..*/\1/')
          echo "Version prefix found: $VERSION_PREFIX"
          # Step 2: Fetch all tags from the remote repository
          git fetch --tags
          # Step 3: Find the highest existing patch number for this MAJOR.MINOR version
          # It looks for tags like 'v2.9.0', 'v2.9.1', etc.
          LATEST_PATCH=$(git tag --list "v${VERSION_PREFIX}.*" | sed -E 's/v[0-9]+\.[0-9]+\.//' | sort -rn | head -n 1)
          # Step 4: If no patch was found, start at -1 so the next is 0. Otherwise, use the found number.
          if [[ -z "$LATEST_PATCH" ]]; then
            LATEST_PATCH=-1
          fi
          echo "Latest patch for v${VERSION_PREFIX}.* is: $LATEST_PATCH"
          # Step 5: Increment the patch number
          NEXT_PATCH=$((LATEST_PATCH + 1))
          echo "Next patch number will be: $NEXT_PATCH"
          # Step 6: Construct the new version string and tag
          NEW_VERSION_STRING="${VERSION_PREFIX}.${NEXT_PATCH}"
          NEW_TAG="v${NEW_VERSION_STRING}"
          # Step 7: Export these values for subsequent steps to use
          echo "new_version=${NEW_VERSION_STRING}" >> $GITHUB_OUTPUT
          echo "new_tag=${NEW_TAG}" >> $GITHUB_OUTPUT

      - name: Set up Arduino CLI
        uses: arduino/setup-arduino-cli@v2

      - name: Install Arduino AVR Core
        run: arduino-cli core install arduino:avr

      - name: Compile Main Firmware for Release
        run: |
          mkdir -p build/main_firmware
          arduino-cli compile \
            --fqbn arduino:avr:nano \
            --output-dir build/main_firmware \
            --build-property "compiler.cpp.extra_flags=-DVERSION=\"\\\"${{ steps.calc_version.outputs.new_version }}\\\"\"" \
            src/ExciterDriver/ExciterDriver.ino

      - name: Compile Calibration Helper
        run: |
          mkdir -p build/calibration_helper
          arduino-cli compile \
            --fqbn arduino:avr:nano \
            --output-dir build/calibration_helper \
            src/CalibrationHelper/CalibrationHelper.ino

      - name: Create GitHub Release
        id: create_release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ steps.calc_version.outputs.new_tag }}
          name: Release ${{ steps.calc_version.outputs.new_tag }}
          generateReleaseNotes: true
          artifacts: |
            build/main_firmware/ExciterDriver.ino.hex
            build/calibration_helper/CalibrationHelper.ino.hex
          token: ${{ secrets.GITHUB_TOKEN }}